{"version":3,"sources":["classes/Cell.js","Components/SudokuBoard/SudokuBoard.js","keys/key-tab.svg","keys/key-arrow.svg","keys/key-one-to-nine.svg","keys/key-del.svg","keys/key-mouse.svg","Components/BoardUse/BoardUse.js","Components/Header/Header.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Cell","row","col","this","value","selected","hasDupRow","hasDupCol","hasDupSquare","userEntered","document","querySelector","isUserEntered","SudokuBoard","board","Array","map","i","j","console","log","process","URL","convertToArray","boardArray","forEach","newRow","cell","getValue","push","parseInt","displayAnswer","answerArray","x","y","getTag","innerHTML","setValue","processKeyDown","e","curCellTag","target","id","substring","curSelCell","getSelected","findSelected","key","curCell","setUserEntered","classList","remove","add","checkRow","checkColumn","checkSquare","preventDefault","processArrowKey","isValidCell","checkSection","cellTag","setDupRow","getDupCol","getDupSquare","cellsToCheck","setDupCol","getDupRow","rowRange","findRange","colRange","setDupSquare","coord","section","otherCell","getRow","getCol","validateCell","cell1","cell2","move","cellPos","newHighlightRow","newHighlightCol","focus","className","onKeyDown","onFocus","toggleSelected","selectCell","onBlur","deselectCurSelectedCell","tabIndex","onClick","require","post","puzzle","then","response","data","catch","error","processBoard","config","BoardUse","src","tab","alt","arrowkeys","mouse","numbers","del","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uTA8IeA,E,WArIb,WAAYC,EAAKC,GAAM,oBACrBC,KAAKC,MAAQ,GACbD,KAAKE,UAAW,EAChBF,KAAKG,WAAY,EACjBH,KAAKI,WAAY,EACjBJ,KAAKK,cAAe,EACpBL,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,EACXC,KAAKM,aAAc,E,kDAMrB,WACEN,KAAKE,UAAYF,KAAKE,W,yBAOxB,WACE,OAAOF,KAAKE,W,oBAOd,WACE,OAAOK,SAASC,cAAT,YAA4BR,KAAKF,IAAjC,YAAwCE,KAAKD,Q,sBAOtD,WACE,OAAOC,KAAKC,Q,sBAOd,SAASA,GACPD,KAAKC,MAAQA,I,uBAQf,SAAUE,GACRH,KAAKG,UAAYA,I,uBASnB,WACE,OAAOH,KAAKG,Y,uBAQd,SAAUC,GACRJ,KAAKI,UAAYA,I,uBASnB,WACE,OAAOJ,KAAKI,Y,0BAQd,SAAaC,GACXL,KAAKK,aAAeA,I,0BAStB,WACE,OAAOL,KAAKK,e,oBAOd,WACE,OAAOL,KAAKF,M,oBAOd,WACE,OAAOE,KAAKD,M,4BAQd,SAAeU,GACbT,KAAKM,YAAcG,M,YChIhB,SAASC,IACd,IAAIC,EAAQ,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAGhB,GAChC,OAAO,YAAIc,MAAM,IAAIC,KAAI,SAACE,EAAGhB,GAC3B,OAAO,IAAIF,EAAKC,EAAKC,SAIzBiB,QAAQC,IAAIC,mIAAYC,KAQxB,IAwBMC,EAAiB,WACrB,IAAIC,EAAa,GAYjB,OAXAV,EAAMW,SAAQ,SAACxB,GACb,IAAIyB,EAAS,GACbzB,EAAIwB,SAAQ,SAACE,GACa,KAApBA,EAAKC,WACPF,EAAOG,KAAK,GAEZH,EAAOG,KAAKC,SAASH,EAAKC,gBAG9BJ,EAAWK,KAAKH,MAEXF,GAOHO,EAAgB,SAACC,GACrBlB,EAAMW,SAAQ,SAACxB,EAAKgC,GAClBhC,EAAIwB,SAAQ,SAACE,EAAMO,GACjBP,EAAKQ,SAASC,UAAY,GAAKJ,EAAYC,GAAGC,GAC9CP,EAAKU,SAAS,GAAKL,EAAYC,GAAGC,WAsClCI,EAAiB,SAACC,GACtB,IAAIC,EAAaD,EAAEE,OACfxC,EAAM6B,SAASU,EAAWE,GAAGC,UAAU,EAAG,IAC1CzC,EAAM4B,SAASU,EAAWE,GAAGC,UAAU,EAAG,IAC1CC,EAhCe,WACnB,IAAK,IAAI3C,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACzB,GAAIY,EAAMb,GAAKC,GAAK2C,cAClB,OAAO/B,EAAMb,GAAKC,GAIxB,OAAO,KAwBU4C,GACjB,GAAKP,EAAEQ,KAAO,KAAOR,EAAEQ,KAAO,KAAkB,WAAVR,EAAEQ,IAAkB,CACxD,IAAIC,EAAUlC,EAAMb,GAAKC,GACX,WAAVqC,EAAEQ,KACJC,EAAQX,SAAS,IACjBW,EAAQC,gBAAe,GACvBT,EAAWU,UAAUC,OAAO,qBAC5BX,EAAWJ,UAAY,KAEvBY,EAAQX,SAASE,EAAEQ,KACnBC,EAAQC,gBAAe,GACvBT,EAAWU,UAAUE,IAAI,qBACzBZ,EAAWJ,UAAYG,EAAEQ,KAE3BM,EAASpD,GACTqD,EAAYpD,GACZqD,EAAYtD,EAAKC,OAEP,YAAVqC,EAAEQ,KACQ,cAAVR,EAAEQ,KACQ,cAAVR,EAAEQ,KACQ,eAAVR,EAAEQ,MAEFR,EAAEiB,iBACFC,EAAgBlB,EAAGK,KASjBS,EAAW,SAACpD,GAChB,IAAIyD,GAAc,EAClB5C,EAAMb,GAAKwB,SAAQ,SAACuB,GAClBU,EAAcC,EAAa,MAAOX,EAASlC,EAAMb,IACjD,IAAI2D,EAAUZ,EAAQb,SACjBuB,GAIHV,EAAQa,WAAU,GACbb,EAAQc,aAAgBd,EAAQe,gBACnCH,EAAQV,UAAUC,OAAO,0BAL3BH,EAAQa,WAAU,GAClBD,EAAQV,UAAUE,IAAI,6BAetBE,EAAc,SAACpD,GAGnB,IAFA,IAAIwD,GAAc,EACdM,EAAe,GACV/D,EAAM,EAAGA,GAAO,EAAGA,IAC1B+D,EAAanC,KAAKf,EAAMb,GAAKC,IAG/B8D,EAAavC,SAAQ,SAACuB,GACpBU,EAAcC,EAAa,MAAOX,EAASgB,GAC3C,IAAIJ,EAAUZ,EAAQb,SACjBuB,GAIHV,EAAQiB,WAAU,GACbjB,EAAQkB,aAAgBlB,EAAQe,gBACnCH,EAAQV,UAAUC,OAAO,0BAL3BH,EAAQiB,WAAU,GAClBL,EAAQV,UAAUE,IAAI,6BAgBtBG,EAAc,SAACtD,EAAKC,GAIxB,IAHA,IAAIiE,EAAWC,EAAUnE,GACrBoE,EAAWD,EAAUlE,GACrB8D,EAAe,GACV/C,EAAI,EAAGA,EAAI,EAAGA,IACrB+C,EAAanC,KAAKf,EAAMqD,EAAS,IAAIE,EAAS,GAAKpD,IACnD+C,EAAanC,KAAKf,EAAMqD,EAAS,GAAK,GAAGE,EAAS,GAAKpD,IACvD+C,EAAanC,KAAKf,EAAMqD,EAAS,GAAK,GAAGE,EAAS,GAAKpD,IAEzD+C,EAAavC,SAAQ,SAACE,GAEpB,IADA,IAAI+B,GAAc,EACTzC,EAAI,EAAGA,EAAI,EAAGA,IAElB0C,EAAa,SAAUhC,EAAMqC,KAG9BN,GAAc,GAIlB,IAAIE,EAAUjC,EAAKQ,SACduB,GAIH/B,EAAK2C,cAAa,GACb3C,EAAKuC,aAAgBvC,EAAKmC,aAC7BF,EAAQV,UAAUC,OAAO,0BAL3BxB,EAAK2C,cAAa,GAClBV,EAAQV,UAAUE,IAAI,6BAiBtBgB,EAAY,SAACG,GACjB,OAAIA,GAAS,EACJ,CAAC,EAAG,GACFA,GAAS,EACX,CAAC,EAAG,GAEN,CAAC,EAAG,IAaPZ,EAAe,SAACa,EAASxB,EAASgB,GACtC,IAAIN,GAAc,EAYlB,OAXAM,EAAavC,SAAQ,SAACgD,GAGhBzB,EAAQ0B,WAAaD,EAAUC,UAC/B1B,EAAQ2B,WAAaF,EAAUE,UAEhCC,EAAa5B,EAASyB,EAAWD,KAElCd,GAAc,MAGXA,GAWHkB,EAAe,SAACC,EAAOC,EAAON,GAClC,IAAId,GAAc,EAYlB,MAXyB,KAArBmB,EAAMjD,YAAqBkD,EAAMlD,aAAeiD,EAAMjD,aACxD8B,GAAc,EACE,WAAZc,EACFM,EAAMR,cAAa,GACE,QAAZE,EACTM,EAAMjB,WAAU,GAEhBiB,EAAMb,WAAU,GAElBa,EAAM3C,SAASe,UAAUE,IAAI,yBAExBM,GAYHqB,EAAO,SAAChC,EAAKiC,GACjB,OAAgB,IAAZA,GAA0B,YAARjC,GAA6B,cAARA,EAEpB,IAAZiC,GAA0B,cAARjC,GAA+B,eAARA,EAGtC,YAARA,GAA6B,cAARA,EAChBiC,EAAU,EAEVA,EAAU,EALZ,EAFA,GAkBLvB,EAAkB,SAAClB,EAAGK,GAC1B,IAAIqC,EACAC,EACU,YAAV3C,EAAEQ,KAA+B,cAAVR,EAAEQ,KAC3BkC,EAAkBF,EAAKxC,EAAEQ,IAAKH,EAAW8B,UACzCQ,EAAkBtC,EAAW+B,WAE7BM,EAAkBrC,EAAW8B,SAC7BQ,EAAkBH,EAAKxC,EAAEQ,IAAKH,EAAW+B,WAE3C7D,EAAMmE,GAAiBC,GAAiB/C,SAASgD,SAgCnD,OACE,qCACE,oBAAIzC,GAAG,SAAP,kEACA,oBAAIA,GAAG,eAAP,SACG5B,EAAME,KAAI,SAACf,EAAKgC,GACf,OAAOhC,EAAIe,KAAI,SAACW,EAAMO,GACpB,OACE,oBACEkD,UAAS,kBAAanD,EAAb,eAAqBC,GAC9BQ,GAAE,WAAMT,EAAN,YAAWC,GAEbmD,UAAW,SAAC9C,GAAD,OAAOD,EAAeC,IACjC+C,QAAS,SAAC/C,GAAD,OAzRJ,SAACqB,GAClB,IAAI3D,EAAM2D,EAAQlB,GAAGC,UAAU,EAAG,GAC9BzC,EAAM0D,EAAQlB,GAAGC,UAAU,EAAG,GAClC7B,EAAMb,GAAKC,GAAKqF,iBAChB3B,EAAQuB,QAqRoBK,CAAWjD,EAAEE,SAC7BgD,OAAQ,SAAClD,GAAD,OAnBU,SAACqB,GAC/B,IAAI3D,EAAM6B,SAAS8B,EAAQlB,GAAGC,UAAU,EAAG,IACvCzC,EAAM4B,SAAS8B,EAAQlB,GAAGC,UAAU,EAAG,IAC3C7B,EAAMb,GAAKC,GAAKqF,iBAgBWG,CAAwBnD,EAAEE,SACzCkD,SAAS,KAPX,UAGU1D,EAHV,YAGeC,YAUvB,sBAAKQ,GAAG,aAAR,UACE,sBAAKA,GAAG,eAAR,UACE,wBAAQkD,QAAS,SAACrD,GAAD,OA7WJ,SAACA,GACpBA,EAAEiB,iBACF,IAAIhC,EAAaD,IACHsE,EAAQ,IAEnBC,KADH,UACWzE,mIAAYC,IADvB,oBAC8C,CAC1CyE,OAAQvE,IAETwE,MAAK,SAAUC,GACdlE,EAAckE,EAASC,MACvBxF,SAASC,cAAc,kBAAkByB,UAAY,MAEtD+D,OAAM,SAAUC,GACfjF,QAAQC,IAAIgF,GACZ1F,SAASC,cAAc,kBAAkByB,UACvCgE,EAAMH,SAASC,QA8VSG,CAAa9D,IAArC,oBACA,wBAAQqD,QAAS,kBAhDvB9E,EAAMW,SAAQ,SAACxB,GACbA,EAAIwB,SAAQ,SAACE,GACXA,EAAKU,SAAS,IACdV,EAAKQ,SAASC,UAAY,GAC1BT,EAAKsC,WAAU,GACftC,EAAKkC,WAAU,GACflC,EAAK2C,cAAa,GAClB3C,EAAKQ,SAASe,UAAUC,OAAO,wBAC/BxB,EAAKQ,SAASe,UAAUC,OAAO,gCAGnCzC,SAASC,cAAc,kBAAkByB,UAAY,KAqC/C,sBAEF,mBAAGM,GAAG,wBAvYdmD,EAAQ,IAAUS,SCFH,UAA0B,oCCA1B,MAA0B,sCCA1B,MAA0B,4CCA1B,MAA0B,oCCA1B,MAA0B,sC,MCYlC,SAASC,IAEd,OACE,sBAAK7D,GAAG,YAAR,UACE,4CACA,sBAAK0C,UAAU,YAAf,UACE,4CACA,qBAAKA,UAAU,eAAeoB,IAAKC,EAAKC,IAAI,YAC5C,qBAAKtB,UAAU,gBAAgBoB,IAAKG,EAAWD,IAAI,eACnD,qBAAKtB,UAAU,gBAAgBoB,IAAKI,EAAOF,IAAI,aAEjD,sBAAKtB,UAAU,YAAf,UACE,mBAAG1C,GAAG,QAAN,oBACA,qBAAK0C,UAAU,eAAeoB,IAAKK,EAASH,IAAI,gBAChD,qBAAKtB,UAAU,eAAeoB,IAAKM,EAAKJ,IAAI,kBAE9C,+BACE,iFACA,mH,MCvBD,SAASK,IACd,OACE,mCACE,iCACE,0DCMOC,MAZf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAK1C,GAAG,kBAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCCOuE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjH,SAASkH,eAAe,SAM1BX,M","file":"static/js/main.ab5ee4dd.chunk.js","sourcesContent":["/**\r\n * A class representing a cell of a sudoku board.\r\n */\r\nclass Cell {\r\n  /**\r\n   * Create a Cell.\r\n   * @param {number} row - The row that the Cell belongs to.\r\n   * @param {number} col - The column that the Cell belongs to.\r\n   */\r\n  constructor(row, col) {\r\n    this.value = \"\";\r\n    this.selected = false;\r\n    this.hasDupRow = false;\r\n    this.hasDupCol = false;\r\n    this.hasDupSquare = false;\r\n    this.row = row;\r\n    this.col = col;\r\n    this.userEntered = false;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the Cell is selected or not.\r\n   */\r\n  toggleSelected() {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this Cell is selected or not.\r\n   * @returns {boolean} Whether this Cell is selected or not.\r\n   */\r\n  getSelected() {\r\n    return this.selected;\r\n  }\r\n\r\n  /**\r\n   * Returns the HTMLElement associated with this Cell.\r\n   * @returns {HTMLElement} The HTML Element that is associated with this Cell.\r\n   */\r\n  getTag() {\r\n    return document.querySelector(`#c${this.row}-${this.col}`);\r\n  }\r\n\r\n  /**\r\n   * Returns the value contained in this Cell.\r\n   * @returns {number} The value contained in this Cell.\r\n   */\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Sets the value of this Cell..\r\n   * @param {string} value - The value contained in this Cell.\r\n   */\r\n  setValue(value) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Sets this Cell's hasDupRow.\r\n   * @param {boolean} hasDupRow - Whether this Cell has another Cell in its row\r\n   * that shares the same value between 1-9.\r\n   */\r\n  setDupRow(hasDupRow) {\r\n    this.hasDupRow = hasDupRow;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this Cell has another Cell in its row that shares the same\r\n   * value between 1-9.\r\n   * @returns {boolean} Whether this Cell has another Cell in its row\r\n   * that shares the same value between 1-9.\r\n   */\r\n  getDupRow() {\r\n    return this.hasDupRow;\r\n  }\r\n\r\n  /**\r\n   * Set this Cell's hasDupCol.\r\n   * @param {boolean} hasDupCol - Whether this Cell has another Cell in its\r\n   * column that shares the same value between 1-9.\r\n   */\r\n  setDupCol(hasDupCol) {\r\n    this.hasDupCol = hasDupCol;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this Cell has another Cell in its column that\r\n   * shares the same value between 1-9.\r\n   * @returns {boolean} Whether this Cell has another Cell in its column that\r\n   * shares the same value between 1-9.\r\n   */\r\n  getDupCol() {\r\n    return this.hasDupCol;\r\n  }\r\n\r\n  /**\r\n   * Set this Cell's hasDupSquare.\r\n   * @param {boolean} hasDupSquare - Whether this Cell has another Cell in its\r\n   * 3x3 square that shares the same value between 1-9.\r\n   */\r\n  setDupSquare(hasDupSquare) {\r\n    this.hasDupSquare = hasDupSquare;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this Cell has another Cell in its 3x3 square that shares\r\n   * the same value between 1-9.\r\n   * @returns {boolean} Whether this Cell has another Cell in its 3x3 square that\r\n   * shares the same value between 1-9.\r\n   */\r\n  getDupSquare() {\r\n    return this.hasDupSquare;\r\n  }\r\n\r\n  /**\r\n   * Returns the row this Cell belongs to.\r\n   * @returns {string} The row this Cell belongs to.\r\n   */\r\n  getRow() {\r\n    return this.row;\r\n  }\r\n\r\n  /**\r\n   * Returns the column this Cell belongs to.\r\n   * @returns {string} The column this Cell belongs to.\r\n   */\r\n  getCol() {\r\n    return this.col;\r\n  }\r\n\r\n  /**\r\n   * Set this Cell's isUserEntered.\r\n   * @param {boolean} isUserEntered - Whether the value in this Cell is etnered\r\n   * by the user.\r\n   */\r\n  setUserEntered(isUserEntered) {\r\n    this.userEntered = isUserEntered;\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import \"./SudokuBoard.css\";\r\nimport Cell from \"../../classes/Cell\";\r\nrequire(\"dotenv\").config();\r\n\r\n/**\r\n * Returns a React element that represents the sudoku board puzzle, including\r\n * its submit and clear buttons.\r\n * @returns {ReactElement} A React element representing the sudoku board\r\n * puzzle and its submit and clear buttons.\r\n */\r\nexport function SudokuBoard() {\r\n  let board = [...Array(9)].map((i, row) => {\r\n    return [...Array(9)].map((j, col) => {\r\n      return new Cell(row, col);\r\n    });\r\n  });\r\n\r\n  console.log(process.env.URL);\r\n  /**\r\n   * Processes the input from the sudoku board puzzle and makes an api call to\r\n   * the backend to solve the puzzle. If the puzzle has a solution it will be\r\n   * displayed, otherwise an error will display.\r\n   * @param {event} e - The event that triggers this function.\r\n   */\r\n  //https://online-sudoku-solver.herokuapp.com/api/solvePuzzle\r\n  const processBoard = (e) => {\r\n    e.preventDefault();\r\n    let boardArray = convertToArray();\r\n    const axios = require(\"axios\");\r\n    axios\r\n      .post(`${process.env.URL}/api/solvePuzzle`, {\r\n        puzzle: boardArray,\r\n      })\r\n      .then(function (response) {\r\n        displayAnswer(response.data);\r\n        document.querySelector(\"#error-message\").innerHTML = \"\";\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        document.querySelector(\"#error-message\").innerHTML =\r\n          error.response.data;\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Creates and returns a representation of the sudoku board as a 2D array of\r\n   * integers.\r\n   * @returns {Array} Representation of the board as integers in a 2D array.\r\n   */\r\n  const convertToArray = () => {\r\n    let boardArray = [];\r\n    board.forEach((row) => {\r\n      let newRow = [];\r\n      row.forEach((cell) => {\r\n        if (cell.getValue() === \"\") {\r\n          newRow.push(0);\r\n        } else {\r\n          newRow.push(parseInt(cell.getValue()));\r\n        }\r\n      });\r\n      boardArray.push(newRow);\r\n    });\r\n    return boardArray;\r\n  };\r\n\r\n  /**\r\n   * Displays the answer to a sudoku puzzle provided by answerArray.\r\n   * @param {Array} answerArray - The solution to a sudoku puzzle to display.\r\n   */\r\n  const displayAnswer = (answerArray) => {\r\n    board.forEach((row, x) => {\r\n      row.forEach((cell, y) => {\r\n        cell.getTag().innerHTML = \"\" + answerArray[x][y];\r\n        cell.setValue(\"\" + answerArray[x][y]);\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns the Cell object that is currently selected by the user, otherwise\r\n   * return null.\r\n   * @returns {Cell} Cell that is currently selected by the user.\r\n   */\r\n  const findSelected = () => {\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let col = 0; col < 9; col++) {\r\n        if (board[row][col].getSelected()) {\r\n          return board[row][col];\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  /**\r\n   * Selects cellTag by setting it to focus and sets its Cell object equivalent\r\n   * to true.\r\n   * @param {HTMLElement} cellTag - The cell HTML Element to select.\r\n   */\r\n  const selectCell = (cellTag) => {\r\n    let row = cellTag.id.substring(1, 2);\r\n    let col = cellTag.id.substring(3, 4);\r\n    board[row][col].toggleSelected();\r\n    cellTag.focus();\r\n  };\r\n\r\n  /**\r\n   * Processes and modifies the appearance of the sudoku board based on e's\r\n   * key that is pressed.\r\n   * @param {Event} e - The Event that triggers this function.\r\n   */\r\n  const processKeyDown = (e) => {\r\n    let curCellTag = e.target;\r\n    let row = parseInt(curCellTag.id.substring(1, 2));\r\n    let col = parseInt(curCellTag.id.substring(3, 4));\r\n    let curSelCell = findSelected();\r\n    if ((e.key >= \"1\" && e.key <= \"9\") || e.key === \"Delete\") {\r\n      let curCell = board[row][col];\r\n      if (e.key === \"Delete\") {\r\n        curCell.setValue(\"\");\r\n        curCell.setUserEntered(false);\r\n        curCellTag.classList.remove(\"cell-user-entered\");\r\n        curCellTag.innerHTML = \"\";\r\n      } else {\r\n        curCell.setValue(e.key);\r\n        curCell.setUserEntered(true);\r\n        curCellTag.classList.add(\"cell-user-entered\");\r\n        curCellTag.innerHTML = e.key;\r\n      }\r\n      checkRow(row);\r\n      checkColumn(col);\r\n      checkSquare(row, col);\r\n    } else if (\r\n      e.key === \"ArrowUp\" ||\r\n      e.key === \"ArrowDown\" ||\r\n      e.key === \"ArrowLeft\" ||\r\n      e.key === \"ArrowRight\"\r\n    ) {\r\n      e.preventDefault();\r\n      processArrowKey(e, curSelCell);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks the row of the sudoku board and modifies the appearance of the board\r\n   * and its array equivalent based on whether duplicate numbers are found.\r\n   * @param {number} row - The row number to check.\r\n   */\r\n  const checkRow = (row) => {\r\n    let isValidCell = true;\r\n    board[row].forEach((curCell) => {\r\n      isValidCell = checkSection(\"row\", curCell, board[row]);\r\n      let cellTag = curCell.getTag();\r\n      if (!isValidCell) {\r\n        curCell.setDupRow(true);\r\n        cellTag.classList.add(\"cell-highlight-error\");\r\n      } else {\r\n        curCell.setDupRow(false);\r\n        if (!curCell.getDupCol() && !curCell.getDupSquare()) {\r\n          cellTag.classList.remove(\"cell-highlight-error\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks the col of the sudoku board and modifies the appearance of the board\r\n   * and its array equivalent based on whether duplicate numbers are found.\r\n   * @param {number} col - The column number to check for.\r\n   */\r\n  const checkColumn = (col) => {\r\n    let isValidCell = true;\r\n    let cellsToCheck = [];\r\n    for (let row = 0; row <= 8; row++) {\r\n      cellsToCheck.push(board[row][col]);\r\n    }\r\n\r\n    cellsToCheck.forEach((curCell) => {\r\n      isValidCell = checkSection(\"col\", curCell, cellsToCheck);\r\n      let cellTag = curCell.getTag();\r\n      if (!isValidCell) {\r\n        curCell.setDupCol(true);\r\n        cellTag.classList.add(\"cell-highlight-error\");\r\n      } else {\r\n        curCell.setDupCol(false);\r\n        if (!curCell.getDupRow() && !curCell.getDupSquare()) {\r\n          cellTag.classList.remove(\"cell-highlight-error\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks the 3x3 square of the sudoku board and modifies the appearance of the\r\n   * board and its array equivalent based on whether dusplicate numbers are found.\r\n   * @param {number} row - The row of the Cell that had its value modified.\r\n   * @param {number} col - The column of the Cell that had its value modified.\r\n   */\r\n  const checkSquare = (row, col) => {\r\n    let rowRange = findRange(row);\r\n    let colRange = findRange(col);\r\n    let cellsToCheck = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      cellsToCheck.push(board[rowRange[0]][colRange[0] + i]);\r\n      cellsToCheck.push(board[rowRange[0] + 1][colRange[0] + i]);\r\n      cellsToCheck.push(board[rowRange[0] + 2][colRange[0] + i]);\r\n    }\r\n    cellsToCheck.forEach((cell) => {\r\n      let isValidCell = true;\r\n      for (let i = 0; i < 3; i++) {\r\n        if (\r\n          !checkSection(\"square\", cell, cellsToCheck) /*||\r\n          !checkSection(false, true, cell, cellsToCheck)*/\r\n        ) {\r\n          isValidCell = false;\r\n        }\r\n      }\r\n\r\n      let cellTag = cell.getTag();\r\n      if (!isValidCell) {\r\n        cell.setDupSquare(true);\r\n        cellTag.classList.add(\"cell-highlight-error\");\r\n      } else {\r\n        cell.setDupSquare(false);\r\n        if (!cell.getDupRow() && !cell.getDupCol()) {\r\n          cellTag.classList.remove(\"cell-highlight-error\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Finds the range of the rows or columns of the 3x3 square that the most\r\n   * recently modified Cell is part of.\r\n   * @param {number} coord - The row or column of Cell that had its value modified.\r\n   * @returns {Array} An array containing the row or column range of the 3x3\r\n   * square that the most recently modified Cell is part of.\r\n   */\r\n  const findRange = (coord) => {\r\n    if (coord <= 2) {\r\n      return [0, 2];\r\n    } else if (coord >= 6) {\r\n      return [6, 8];\r\n    }\r\n    return [3, 5];\r\n  };\r\n\r\n  /**\r\n   * Returns true if curCell does not contain the same value as any other cells\r\n   * in cellsToCheck, within a specified section (row, column, or square). Returns\r\n   * false otherwise.\r\n   * @param {string} section - The section to check. Must be either \"row\",\r\n   * \"col\", or \"square\".\r\n   * @param {Cell} curCell - The Cell to check duplicates for.\r\n   * @param {Array} cellsToCheck - The Cells to compare to curCell.\r\n   * @returns {boolean} Whether the section contains any duplicate values.\r\n   */\r\n  const checkSection = (section, curCell, cellsToCheck) => {\r\n    let isValidCell = true;\r\n    cellsToCheck.forEach((otherCell) => {\r\n      if (\r\n        !(\r\n          curCell.getRow() === otherCell.getRow() &&\r\n          curCell.getCol() === otherCell.getCol()\r\n        ) &&\r\n        !validateCell(curCell, otherCell, section)\r\n      ) {\r\n        isValidCell = false;\r\n      }\r\n    });\r\n    return isValidCell;\r\n  };\r\n\r\n  /**\r\n   * Returns true if cell1 and cell2's values are the same (meaning they are not\r\n   * valid cells). Returns false otherwise. Modifies cell2's values based on this conclusion.\r\n   * @param {Cell} cell1 - The first Cell to compare.\r\n   * @param {Cell} cell2 - The second Cell to compare.\r\n   * @param {string} section - The section to check (\"row\", \"col\", or \"square\")\r\n   * @returns {boolean} Whether cell1 and cell2's values are the same.\r\n   */\r\n  const validateCell = (cell1, cell2, section) => {\r\n    let isValidCell = true;\r\n    if (cell1.getValue() !== \"\" && cell2.getValue() === cell1.getValue()) {\r\n      isValidCell = false;\r\n      if (section === \"square\") {\r\n        cell2.setDupSquare(true);\r\n      } else if (section === \"row\") {\r\n        cell2.setDupRow(true);\r\n      } else {\r\n        cell2.setDupCol(true);\r\n      }\r\n      cell2.getTag().classList.add(\"cell-highlight-error\");\r\n    }\r\n    return isValidCell;\r\n  };\r\n\r\n  /**\r\n   * Returns the coordinate (row or column) of the new cell that would be\r\n   * selected based on the key pressed and cellPos.\r\n   * @param {String} key - The arrow key that was pressed (\"ArrowUp\",\r\n   * \"ArrowDown\", \"ArrowLeft\", or \"ArrowRight\")\r\n   * @param {number} cellPos - The row or column of the Cell that was recently\r\n   * modified.\r\n   * @returns {number} The coordinate of the new cell that would be selected.\r\n   */\r\n  const move = (key, cellPos) => {\r\n    if (cellPos === 0 && (key === \"ArrowUp\" || key === \"ArrowLeft\")) {\r\n      return 8;\r\n    } else if (cellPos === 8 && (key === \"ArrowDown\" || key === \"ArrowRight\")) {\r\n      return 0;\r\n    } else {\r\n      if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\r\n        return cellPos - 1;\r\n      } else {\r\n        return cellPos + 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Determines and selects the new Cell based on they key that e triggers and\r\n   * curSelCell.\r\n   * @param {Event} e - The event that triggers this function.\r\n   * @param {Cell} curSelCell - The currently selected Cell.\r\n   */\r\n  const processArrowKey = (e, curSelCell) => {\r\n    let newHighlightRow;\r\n    let newHighlightCol;\r\n    if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\r\n      newHighlightRow = move(e.key, curSelCell.getRow());\r\n      newHighlightCol = curSelCell.getCol();\r\n    } else {\r\n      newHighlightRow = curSelCell.getRow();\r\n      newHighlightCol = move(e.key, curSelCell.getCol());\r\n    }\r\n    board[newHighlightRow][newHighlightCol].getTag().focus();\r\n  };\r\n\r\n  /**\r\n   * Resets the sudoku board to be blank.\r\n   */\r\n  const clearBoard = () => {\r\n    board.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.setValue(\"\");\r\n        cell.getTag().innerHTML = \"\";\r\n        cell.setDupCol(false);\r\n        cell.setDupRow(false);\r\n        cell.setDupSquare(false);\r\n        cell.getTag().classList.remove(\"cell-highlight-error\");\r\n        cell.getTag().classList.remove(\"cell-user-entered\");\r\n      });\r\n    });\r\n    document.querySelector(\"#error-message\").innerHTML = \"\";\r\n  };\r\n\r\n  /**\r\n   * Deselects cellTag and its Cell counterpart.\r\n   * @param {HTMLElement} cellTag - The HTML Element representing the Cell to be\r\n   * deselected.\r\n   */\r\n  const deselectCurSelectedCell = (cellTag) => {\r\n    let row = parseInt(cellTag.id.substring(1, 2));\r\n    let col = parseInt(cellTag.id.substring(3, 4));\r\n    board[row][col].toggleSelected();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2 id=\"prompt\">Enter values into the board and hit submit to solve!</h2>\r\n      <ul id=\"sudoku-board\">\r\n        {board.map((row, x) => {\r\n          return row.map((cell, y) => {\r\n            return (\r\n              <li\r\n                className={`cell row${x} col${y}`}\r\n                id={`c${x}-${y}`}\r\n                key={`${x}-${y}`}\r\n                onKeyDown={(e) => processKeyDown(e)}\r\n                onFocus={(e) => selectCell(e.target)}\r\n                onBlur={(e) => deselectCurSelectedCell(e.target)}\r\n                tabIndex=\"0\"\r\n              ></li>\r\n            );\r\n          });\r\n        })}\r\n      </ul>\r\n      <div id=\"board-menu\">\r\n        <div id=\"menu-buttons\">\r\n          <button onClick={(e) => processBoard(e)}>Submit</button>\r\n          <button onClick={() => clearBoard()}>Clear</button>\r\n        </div>\r\n        <p id=\"error-message\"></p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/key-tab.b5325a8c.svg\";","export default __webpack_public_path__ + \"static/media/key-arrow.1d262c56.svg\";","export default __webpack_public_path__ + \"static/media/key-one-to-nine.5c763635.svg\";","export default __webpack_public_path__ + \"static/media/key-del.f745cffe.svg\";","export default __webpack_public_path__ + \"static/media/key-mouse.bcaac00b.svg\";","import tab from \"../../keys/key-tab.svg\";\r\nimport arrowkeys from \"../../keys/key-arrow.svg\";\r\nimport numbers from \"../../keys/key-one-to-nine.svg\";\r\nimport del from \"../../keys/key-del.svg\";\r\nimport mouse from \"../../keys/key-mouse.svg\";\r\nimport \"./BoardUse.css\";\r\n/**\r\n * Returns a React element representing instructions on how to use the sudoku board.\r\n * @returns {ReactElement} Returns a React element representing instructions on how\r\n * to use the sudoku board.\r\n */\r\n\r\nexport function BoardUse() {\r\n  /*todo:add images*/\r\n  return (\r\n    <div id=\"board-use\">\r\n      <h2>Board use:</h2>\r\n      <div className=\"key-group\">\r\n        <p>Navigation:</p>\r\n        <img className=\"key-long key\" src={tab} alt=\"Tab key\" />\r\n        <img className=\"key-arrow key\" src={arrowkeys} alt=\"Arrow Keys\" />\r\n        <img className=\"key-mouse key\" src={mouse} alt=\"Mouse\" />\r\n      </div>\r\n      <div className=\"key-group\">\r\n        <p id=\"input\">Input:</p>\r\n        <img className=\"key-nums key\" src={numbers} alt=\"One to nine\" />\r\n        <img className=\"key-long key\" src={del} alt=\"Delete key\" />\r\n      </div>\r\n      <ol>\r\n        <li>Each cell must be a number between 1-9 or blank</li>\r\n        <li>\r\n          Each row, column, and 3x3 box may only contain each number between 1-9\r\n          once\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Header.css\";\r\n\r\n/**\r\n * Returns a React element representing the header.\r\n * @returns {ReactElement} A React element represeting the header.\r\n */\r\n\r\nexport function Header() {\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Sudoku Puzzle Solver</h1>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { SudokuBoard } from \"../SudokuBoard/SudokuBoard\";\nimport { BoardUse } from \"../BoardUse/BoardUse\";\nimport { Header } from \"../Header/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div id=\"board-and-rules\">\n        <SudokuBoard />\n        <BoardUse />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}